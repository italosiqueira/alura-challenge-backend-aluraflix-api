# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: alura-challenge-backend-aluraflix-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

# serverless-offline: para execução local da aplicação (note que serviços externos devem ser configurados independentementes)
# serverless-dynamodb-local: para executar uma instância local do DynamoDB (evitar cobranças)
plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3001
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    seed:
      domain:
        sources:
          - table: ${self:provider.environment.VIDEOS_TABLE}
            sources: [./offline/migrations/videos-seed.json]
          - table: ${self:provider.environment.CATEGORIAS_TABLE}
            sources: [./offline/migrations/categorias-seed.json]
  # Objeto Javascript com o valor da chave simétrica para autenticação das solicitações
  # Armazenado em forma de arquivo JS.
  secrets: ${file(secrets.json)}

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  # Configuração dos Authorizers personalizados da AWS
  httpApi:
    authorizers:
      customAuthorizer:
        type: request
        payloadVersion: '1.0'
        functionName: verify-token

# you can overwrite defaults here
  stage: dev
  region: us-east-1

# Role Statements para as Funções Lambda do Usuário IAM (para uso na infra da AWS)
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - dynamodb:Query
#        - dynamodb:Scan
#        - dynamodb:PutItem
#        - dynamodb:DeleteItem
#        - dynamodb:UpdateItem
#        - dynamodb:GetItem
#      Resource: 
#        - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}'
#        - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CATEGORIAS_TABLE}'
#
# Variáveis Globais de Ambiente (podem ser acessadas inclusive de dentro do programa)
# opt:<var> refere-se ao valor de linha de comando --var
# self:<var> refere-se às variáveis especificadas no arquivo serverless.yml
  environment:
    VIDEOS_TABLE: 'VIDEOS'
    CATEGORIAS_TABLE: 'CATEGORIAS'
    JWT_SECRET: ${self:custom.secrets.JWT_SECRET}

# you can add packaging information here
package:
  patterns:
    - '!.dynamodb/**'

functions:
  # Nossa função que provê a autenticação e validação das requisições, como definido acima
  verify-token:
    handler: middlewares/middleware-auth.auth
  hello:
    handler: handler.hello
    events:
      - httpApi:
          path: /hello
          method: get
  login:
    handler: api/loginHandler.login
    events:
      - httpApi:
          path: /login
          method: post
  listarCategorias:
    handler: handler.listarCategorias
    events:
      - httpApi:
          path: /categorias
          method: get
          # Utilização do middleware de autenticação/autorização. Isolado dos controladores e rotas
          authorizer: verify-token
  obterCategoria:
    handler: handler.obterCategoria
    events:
      - httpApi:
          path: /categorias/{categoriaId}
          method: get
          authorizer: verify-token
  listarVideosCategoria:
    handler: handler.listarVideosCategoria
    events:
      - httpApi:
          path: /categorias/{categoriaId}/videos
          method: get
          authorizer: verify-token
  criarcategoria:
    handler: handler.criarCategoria
    events:
      - httpApi:
          path: /categorias
          method: post
          authorizer: verify-token
  atualizarcategoria:
    handler: handler.atualizarCategoria
    events:
      - httpApi:
          path: /categorias/{categoriaId}
          method: put
          authorizer: verify-token
  removerCategoria:
    handler: handler.removerCategoria
    events:
      - httpApi:
          path: /categorias/{categoriaId}
          method: delete
          authorizer: verify-token
  listarVideos:
    handler: handler.listarVideos
    events:
      - httpApi:
          path: /videos
          method: get
          authorizer: verify-token
  listarVideosPublicos:
    handler: handler.listarVideosPublicos
    events:
      - httpApi:
          path: /videos/free
          method: get
  obterVideo:
    handler: handler.obterVideo
    events:
      - httpApi:
          path: /videos/{videoId}
          method: get
          authorizer: verify-token
  criarVideo:
    handler: handler.criarVideo
    events:
      - httpApi:
          path: /videos
          method: post
          authorizer: verify-token
  atualizarVideo:
    handler: handler.atualizarVideo
    events:
      - httpApi:
          path: /videos/{videoId}
          method: put
          authorizer: verify-token
  removerVideo:
    handler: handler.removerVideo
    events:
      - httpApi:
          path: /videos/{videoId}
          method: delete
          authorizer: verify-token

# Provisionamento de uma tabela no SGBD AWS DynamoDB. Note a reserva de 
# recursos, lá embaixo. É mínima por tratar-se de um pequeno projeto de 
# aprendizagem.
resources:
  Resources:
    VideosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.VIDEOS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    CategoriasTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CATEGORIAS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1